// <auto-generated />
using System;
using Backend.Dal;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Backend.Dal.Migrations.App
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Backend.Dal.Models.CarEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasComment("Primary key");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("brand");

                    b.Property<string>("CarCondition")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("car_condition")
                        .HasComment("Car condition");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("color");

                    b.Property<string>("CurrentOwner")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("current_owner");

                    b.Property<int?>("Mileage")
                        .HasColumnType("integer")
                        .HasColumnName("mileage");

                    b.Property<int?>("PhotoMetadataId")
                        .HasColumnType("integer")
                        .HasColumnName("photo_metadata_id");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<string>("PrioritySale")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("priority_sale")
                        .HasComment("Car priority sale");

                    b.HasKey("Id");

                    b.HasIndex("PhotoMetadataId")
                        .IsUnique();

                    b.ToTable("cars", (string)null);
                });

            modelBuilder.Entity("Backend.Dal.Models.PhotoEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<byte[]>("PhotoBytes")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("photo_bytes");

                    b.HasKey("Id");

                    b.ToTable("photos", (string)null);
                });

            modelBuilder.Entity("Backend.Dal.Models.PhotoMetadataEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CarId")
                        .HasColumnType("integer");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("extension");

                    b.Property<Guid?>("PhotoId")
                        .HasColumnType("uuid")
                        .HasColumnName("photo_id");

                    b.Property<string>("StorageType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("storage_type");

                    b.HasKey("Id");

                    b.ToTable("photo_metadata", (string)null);
                });

            modelBuilder.Entity("Backend.Dal.Models.CarEntity", b =>
                {
                    b.HasOne("Backend.Dal.Models.PhotoMetadataEntity", "PhotoMetadata")
                        .WithOne("Car")
                        .HasForeignKey("Backend.Dal.Models.CarEntity", "PhotoMetadataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_car_photo_metadata");

                    b.Navigation("PhotoMetadata");
                });

            modelBuilder.Entity("Backend.Dal.Models.PhotoMetadataEntity", b =>
                {
                    b.Navigation("Car")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
